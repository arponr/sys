;; http://hugoheden.wordpress.com/2009/03/08/copypaste-with-emacs-in-terminal/
;; I prefer using the "clipboard" selection (the one the
;; typically is used by c-c/c-v) before the primary selection
;; (that uses mouse-select/middle-button-click)
(setq x-select-enable-clipboard t)

;; If emacs is run in a terminal, the clipboard- functions have no
;; effect. Instead, we use of xsel, see
;; http://www.vergenet.net/~conrad/software/xsel/ -- "a command-line
;; program for getting and setting the contents of the X selection"
(unless window-system
 (when (getenv "DISPLAY")
  ;; Callback for when user cuts
  (defun xsel-cut-function (text &optional push)
    ;; Insert text to temp-buffer, and "send" content to xsel stdin
    (with-temp-buffer
      (insert text)
      ;; I prefer using the "clipboard" selection (the one the
      ;; typically is used by c-c/c-v) before the primary selection
      ;; (that uses mouse-select/middle-button-click)
      (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
  ;; Call back for when user pastes
  (defun xsel-paste-function()
    ;; Find out what is current selection by xsel. If it is different
    ;; from the top of the kill-ring (car kill-ring), then return
    ;; it. Else, nil is returned, so whatever is in the top of the
    ;; kill-ring will be used.
    (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
      (unless (string= (car kill-ring) xsel-output)
        xsel-output )))
  ;; Attach callbacks to hooks
  (setq interprogram-cut-function 'xsel-cut-function)
  (setq interprogram-paste-function 'xsel-paste-function)
  ;; Idea from
  ;; http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/
  ;; http://www.mail-archive.com/help-gnu-emacs@gnu.org/msg03577.html
 ))

;; load elpa packages now
(setq package-enable-at-startup nil)
(package-initialize)

;; Put autosave files and backup files in ~/.emacs.d/
;; -- snarfed.org/gnu_emacs_backup_files
(custom-set-variables
  '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
  '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))

;; Extension files directory
(add-to-list 'load-path (expand-file-name "~/.emacs.d/extensions"))

;; Use shell PATH
;; -- http://stackoverflow.com/questions/6411121
(defun set-path-from-shell ()
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(if window-system (set-path-from-shell))

;; Edit settings
(set-cursor-color "#000000")
(set-face-attribute  'default nil :family "DejaVu Sans Mono" :height 90
                     :foreground "#222222" :background "ffffff")
(set-face-foreground 'font-lock-type-face          "#333333")
(set-face-foreground 'font-lock-function-name-face "#333333")
(set-face-foreground 'font-lock-variable-name-face "#333333")
(set-face-foreground 'font-lock-constant-face      "#333333")
(set-face-foreground 'font-lock-comment-face       "#102090")
(set-face-foreground 'font-lock-string-face        "#105010")
(set-face-foreground 'font-lock-keyword-face       "#909090")
(set-face-foreground 'font-lock-builtin-face       "#909090")
(set-face-foreground 'button                       "#900090")
(set-face-foreground 'minibuffer-prompt            "#900090")
(set-face-background 'region                       "#dddddd")

(setq-default indent-tabs-mode nil)

;; key-bindings
(global-set-key "\C-cf" 'auto-fill-mode)
(global-set-key "\C-xk" 'kill-this-buffer)
(global-set-key "\C-a" 'back-to-indentation)
(global-set-key "\C-c\C-a" 'move-beginning-of-line)

;; GUI is evil
;; -- github.com/benskuhn/dot-emacs
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(column-number-mode 1)

;; Hide successful compilations
;; -- github.com/antonj/.emacs.d/blob/master/aj-compilation.el
(require 'aj-compilation)

;; mu4e
;; (load "mu4e.el")

;; c-mode
(setq c-default-style "bsd"
      c-basic-offset 4)
(add-hook 'c-mode-hook (lambda () (setq show-trailing-whitespace t)))


;; coffee-mode
(require 'coffee-mode)
(custom-set-variables '(coffee-tab-width 4))
(add-hook 'coffee-mode-hook (lambda () (coffee-cos-mode 1)))
(add-hook 'coffee-mode-hook (lambda () (setq show-trailing-whitespace t)))

;; go-mode
(require 'go-mode-load)
(add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
(add-hook 'before-save-hook 'gofmt-before-save)
(add-hook 'go-mode-hook (lambda () (setq show-trailing-whitespace t)))

;; latex-mode
(load "latex-mode.el")

;; scss-mode
(autoload 'scss-mode "scss-mode")
(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(add-hook 'scss-mode-hook (lambda () (setq show-trailing-whitespace t)))
