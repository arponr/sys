package bcast

import (
	"sync"

	"github.com/arponr/yoneda/data"
)

type messageWriter interface {
	WriteMessage(*data.Message)
}

type Broadcast struct {
	m chan *data.Message
	w <-chan messageWriter
}

func New() *Broadcast {
	return &Broadcast{
		m: make(chan *data.Message),
		w: make(<-chan messageWriter),
	}
}

func (b *Broadcast) Cast() {
	for w := range b.w {
		go w.transcribe(b.m)
	}
}

func (w messageWriter) transcribe(ch <-chan *data.Message) {
	for m := range ch {
		w.WriteMessage(m)
	}
}

type Set map[int]*Broadcast

func (s *Set) Add(i int) {
	s[i] = New()
	s[i].Cast()
}

func ThreadCasts() (Set, error) {
	s := make(Set)
	ids, err := data.AllThreadIds()
	if err != nil {
		return nil, err
	}
	for _, id := range ids {
		s.Add(id)
	}
	return s, nil
}
