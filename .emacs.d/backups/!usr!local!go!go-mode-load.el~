<!DOCTYPE html>
<html>
<head><link rel="dns-prefetch" href="//ajax.googleapis.com"><script type='text/javascript'>window.mod_pagespeed_prefetch_start = Number(new Date());window.mod_pagespeed_num_resources_prefetched = 0</script>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>misc/emacs/go-mode-load.el - The Go Programming Language</title>

<script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script type="text/javascript">window.jQuery||document.write(unescape("%3Cscript src='/doc/jquery.js' type='text/javascript'%3E%3C/script%3E"));</script>

<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"/>

</head>
<body><noscript><meta HTTP-EQUIV="refresh" content="0;url='http://tip.golang.org/misc/emacs/go-mode-load.el?ModPagespeed=noscript'" /><style><!--table,div,span,font,p{display:none} --></style><div style="display:block">Please click <a href="http://tip.golang.org/misc/emacs/go-mode-load.el?ModPagespeed=noscript">here</a> if you are not redirected within a few seconds.</div></noscript>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div id="menu">
<a href="/doc/">Documents</a>
<a href="/ref/">References</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>

<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="/">The Go Programming Language</a></div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Text file misc/emacs/go-mode-load.el</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	;;; go-mode-load.el --- automatically extracted autoloads
<a id="L2"></a><span class="ln">     2</span>	;;; Commentary:
<a id="L3"></a><span class="ln">     3</span>	
<a id="L4"></a><span class="ln">     4</span>	;; To install go-mode, add the following lines to your .emacs file:
<a id="L5"></a><span class="ln">     5</span>	;;   (add-to-list &#39;load-path &#34;PATH CONTAINING go-mode-load.el&#34; t)
<a id="L6"></a><span class="ln">     6</span>	;;   (require &#39;go-mode-load)
<a id="L7"></a><span class="ln">     7</span>	;;
<a id="L8"></a><span class="ln">     8</span>	;; After this, go-mode will be used for files ending in &#39;.go&#39;.
<a id="L9"></a><span class="ln">     9</span>	;;
<a id="L10"></a><span class="ln">    10</span>	;; To compile go-mode from the command line, run the following
<a id="L11"></a><span class="ln">    11</span>	;;   emacs -batch -f batch-byte-compile go-mode.el
<a id="L12"></a><span class="ln">    12</span>	;;
<a id="L13"></a><span class="ln">    13</span>	;; See go-mode.el for documentation.
<a id="L14"></a><span class="ln">    14</span>	;;
<a id="L15"></a><span class="ln">    15</span>	;; To update this file, evaluate the following form
<a id="L16"></a><span class="ln">    16</span>	;;   (let ((generated-autoload-file buffer-file-name)) (update-file-autoloads &#34;go-mode.el&#34;))
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	;;; Code:
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	;;;### (autoloads (go-download-play godoc gofmt-before-save go-mode)
<a id="L22"></a><span class="ln">    22</span>	;;;;;;  &#34;go-mode&#34; &#34;go-mode.el&#34; (20767 50749))
<a id="L23"></a><span class="ln">    23</span>	;;; Generated autoloads from go-mode.el
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	(autoload &#39;go-mode &#34;go-mode&#34; &#34;\
<a id="L26"></a><span class="ln">    26</span>	Major mode for editing Go source text.
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	This mode provides (not just) basic editing capabilities for
<a id="L29"></a><span class="ln">    29</span>	working with Go code. It offers almost complete syntax
<a id="L30"></a><span class="ln">    30</span>	highlighting, indentation that is almost identical to gofmt,
<a id="L31"></a><span class="ln">    31</span>	proper parsing of the buffer content to allow features such as
<a id="L32"></a><span class="ln">    32</span>	navigation by function, manipulation of comments or detection of
<a id="L33"></a><span class="ln">    33</span>	strings.
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	Additionally to these core features, it offers various features to
<a id="L36"></a><span class="ln">    36</span>	help with writing Go code. You can directly run buffer content
<a id="L37"></a><span class="ln">    37</span>	through gofmt, read godoc documentation from within Emacs, modify
<a id="L38"></a><span class="ln">    38</span>	and clean up the list of package imports or interact with the
<a id="L39"></a><span class="ln">    39</span>	Playground (uploading and downloading pastes).
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	The following extra functions are defined:
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	- `gofmt&#39;
<a id="L44"></a><span class="ln">    44</span>	- `godoc&#39;
<a id="L45"></a><span class="ln">    45</span>	- `go-import-add&#39;
<a id="L46"></a><span class="ln">    46</span>	- `go-remove-unused-imports&#39;
<a id="L47"></a><span class="ln">    47</span>	- `go-goto-imports&#39;
<a id="L48"></a><span class="ln">    48</span>	- `go-play-buffer&#39; and `go-play-region&#39;
<a id="L49"></a><span class="ln">    49</span>	- `go-download-play&#39;
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	If you want to automatically run `gofmt&#39; before saving a file,
<a id="L52"></a><span class="ln">    52</span>	add the following hook to your emacs configuration:
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	\(add-hook &#39;before-save-hook &#39;gofmt-before-save)
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	If you&#39;re looking for even more integration with Go, namely
<a id="L57"></a><span class="ln">    57</span>	on-the-fly syntax checking, auto-completion and snippets, it is
<a id="L58"></a><span class="ln">    58</span>	recommended to look at goflymake
<a id="L59"></a><span class="ln">    59</span>	\(https://github.com/dougm/goflymake), gocode
<a id="L60"></a><span class="ln">    60</span>	\(https://github.com/nsf/gocode) and yasnippet-go
<a id="L61"></a><span class="ln">    61</span>	\(https://github.com/dominikh/yasnippet-go)
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	\(fn)&#34; t nil)
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	(add-to-list &#39;auto-mode-alist (cons &#34;\\.go\\&#39;&#34; &#39;go-mode))
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	(autoload &#39;gofmt-before-save &#34;go-mode&#34; &#34;\
<a id="L68"></a><span class="ln">    68</span>	Add this to .emacs to run gofmt on the current buffer when saving:
<a id="L69"></a><span class="ln">    69</span>	 (add-hook &#39;before-save-hook &#39;gofmt-before-save).
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	Note that this will cause go-mode to get loaded the first time
<a id="L72"></a><span class="ln">    72</span>	you save any file, kind of defeating the point of autoloading.
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	\(fn)&#34; t nil)
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	(autoload &#39;godoc &#34;go-mode&#34; &#34;\
<a id="L77"></a><span class="ln">    77</span>	Show go documentation for a query, much like M-x man.
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	\(fn QUERY)&#34; t nil)
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	(autoload &#39;go-download-play &#34;go-mode&#34; &#34;\
<a id="L82"></a><span class="ln">    82</span>	Downloads a paste from the playground and inserts it in a Go
<a id="L83"></a><span class="ln">    83</span>	buffer. Tries to look for a URL at point.
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	\(fn URL)&#34; t nil)
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	;;;***
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	(provide &#39;go-mode-load)
<a id="L90"></a><span class="ln">    90</span>	;; Local Variables:
<a id="L91"></a><span class="ln">    91</span>	;; version-control: never
<a id="L92"></a><span class="ln">    92</span>	;; no-byte-compile: t
<a id="L93"></a><span class="ln">    93</span>	;; no-update-autoloads: t
<a id="L94"></a><span class="ln">    94</span>	;; coding: utf-8
<a id="L95"></a><span class="ln">    95</span>	;; End:
<a id="L96"></a><span class="ln">    96</span>	;;; go-mode-load.el ends here
</pre><p><a href="/misc/emacs/go-mode-load.el?m=text">View as plain text</a></p>

<div id="footer">
Build version devel +1d079908dd84 Thu Apr 25 18:47:12 2013 +0200.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<script pagespeed_no_defer="">(function(){var e=window,f=Math,g="round",h="performance",k="&rit_script=",r="&rit_link=",y="&rit_img=",z="&rit_css=",A="&nttfb=",B="&nfd=",C="&ndt=",D="&nct=",E="&nbt=",F="&mfd=",G="&attfb=",H="&afd=",I="&adt=",J="&act=",K="&abt=",L="";e.pagespeed=e.pagespeed||{};var M=e.pagespeed;
M.getResourceTimingData=function(){if(e[h]&&(e[h].getEntries||e[h].webkitGetEntries)){for(var s=0,t=0,l=0,u=0,m=0,v=0,n=0,w=0,p=0,x=0,q=0,c={},d=e[h].getEntries?e[h].getEntries():e[h].webkitGetEntries(),b=0;b<d.length;b++){var a=d[b].duration;0<a&&(s+=a,++l,t=f.max(t,a));a=d[b].connectEnd-d[b].connectStart;0<a&&(v+=a,++n);a=d[b].domainLookupEnd-d[b].domainLookupStart;0<a&&(u+=a,++m);a=d[b].initiatorType;c[a]?++c[a]:c[a]=1;a=d[b].requestStart-d[b].fetchStart;0<a&&(x+=a,++q);a=d[b].responseStart-d[b].requestStart;
0<a&&(w+=a,++p)}return H+(l?f[g](s/l):0)+B+l+F+f[g](t)+J+(n?f[g](v/n):0)+D+n+I+(m?f[g](u/m):0)+C+m+K+(q?f[g](x/q):0)+E+q+G+(p?f[g](w/p):0)+A+p+(c.css?z+c.css:L)+(c.link?r+c.link:L)+(c.script?k+c.script:L)+(c.img?y+c.img:L)}return L};M.getResourceTimingData=M.getResourceTimingData;})();
(function(){var c=encodeURIComponent,f=window,h="performance",k="unload:",l="on",m="load:",n="load",p="ets=",q="beforeunload",r="EventStart",s="?",t="=",u="&url=",v="&ttfb=",w="&req_start=",x="&ref=",y="&r",z="&nt=",A="&nrp=",B="&nav=",C="&ifr=1",D="&ifr=0",E="&htmlAt=",F="&fp=",G="&dwld=",H="&dom_c=",I="&dns=",J="&connect=",K="&ccul=",L="&ccrl=",M="&ccos=",N="&ccis=",O="&cces=",P="&b_csi=",Q="&",R="";f.pagespeed=f.pagespeed||{};var S=f.pagespeed,T=function(a,d,b,e){this.d=a;this.a=d;this.b=b;this.e=e};S.beaconUrl=R;
T.prototype.c=function(){var a=this.d,d=f.mod_pagespeed_start,b=Number(new Date)-d,a=a+(-1==a.indexOf(s)?s:Q),a=a+p+(this.a==n?m:k),a=a+b;if(this.a!=q||!f.mod_pagespeed_loaded){a+=y+this.a+t;if(f[h]){var b=f[h].timing,e=b.navigationStart,g=b.requestStart,a=a+(b[this.a+r]-e),a=a+(B+(b.fetchStart-e)),a=a+(I+(b.domainLookupEnd-b.domainLookupStart)),a=a+(J+(b.connectEnd-b.connectStart)),a=a+(w+(g-e)),a=a+(v+(b.responseStart-g)),a=a+(G+(b.responseEnd-b.responseStart)),a=a+(H+(b.domContentLoadedEventStart-
e));f[h].navigation&&(a+=z+f[h].navigation.type);e=-1;b.msFirstPaint?e=b.msFirstPaint:f.chrome&&f.chrome.loadTimes&&(e=Math.floor(1E3*f.chrome.loadTimes().firstPaintTime));e-=g;0<=e&&(a+=F+e)}else a+=b;S.getResourceTimingData&&f.parent==f&&(a+=S.getResourceTimingData());a+=f.parent!=f?C:D;this.a==n&&(f.mod_pagespeed_loaded=!0,(b=f.mod_pagespeed_num_resources_prefetched)&&(a+=A+b),(b=f.mod_pagespeed_prefetch_start)&&(a+=E+(d-b)));S.panelLoader&&(d=S.panelLoader.getCsiTimingsString(),d!=R&&(a+=P+d));
S.criticalCss&&(d=S.criticalCss,a+=N+d.total_critical_inlined_size+O+d.total_original_external_size+M+d.total_overhead_size+L+d.num_replaced_links+K+d.num_unreplaced_links);this.b!=R&&(a+=this.b);document.referrer&&(a+=x+c(document.referrer));a+=u+c(this.e);S.beaconUrl=a;(new Image).src=a}};S.f=function(a,d,b,e){var g=new T(a,d,b,e);f.addEventListener?f.addEventListener(d,function(){g.c()},!1):f.attachEvent(l+d,function(){g.c()})};S.addInstrumentationInit=S.f;})();

pagespeed.addInstrumentationInit('http://1-ps.googleusercontent.com/beacon?org=104_1_vo', 'load', '&s_ttfb=11&id=1376457746911215', 'http://tip.golang.org/misc/emacs/go-mode-load.el');</script></body>
<script type="text/javascript">(function(){var po=document.createElement('script');po.type='text/javascript';po.async=true;po.src='https://apis.google.com/js/plusone.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po,s);})();</script>
</html>

